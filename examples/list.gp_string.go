///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Tue Nov 22 2016 19:52:00]
// Generate from:
//   [github.com/vipally/gogp/examples/gp/list.gp]
//   [github.com/vipally/gogp/examples/example.gpg] [list_string]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct 24 2016 20:25:45]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////

package examples

////////////////////////////////////////////////////////////////////////////////

var gStringListGbl struct {
	cmp CmpString
}

func init() {
	gStringListGbl.cmp = gStringListGbl.cmp.CreateByName("")
}

//double-way cycle link list node
type StringListNode struct {
	string
	prev, next *StringListNode
}

func (this *StringListNode) Get() string {
	return this.string
}

func (this *StringListNode) Set(v string) (old string) {
	old, this.string = this.string, v
	return
}

func (this *StringListNode) Next() (r *StringListNode) {
	if this != nil {
		r = this.next
	}
	return
}

func (this *StringListNode) Prev() (r *StringListNode) {
	if this != nil {
		r = this.prev
	}
	return
}

type StringListNodeVisitor struct {
	node, head *StringListNode
}

func (this *StringListNodeVisitor) Reset() {
	this.node = nil
}

func (this *StringListNodeVisitor) Next() (ok bool) {
	if this.node == nil {
		if ok = this.head != nil; ok {
			this.node = this.head
		}
	} else {
		this.node = this.node.next
		ok = this.node != this.head
	}
	return
}

func (this *StringListNodeVisitor) Prev() (ok bool) {
	if this.node == nil {
		if ok = this.head != nil; ok {
			this.node = this.head.prev
		}
	} else {
		this.node = this.node.prev
		ok = this.node != this.head.prev
	}
	return
}

func (this *StringListNodeVisitor) Get() *StringListNode {
	return this.node
}

func (this *StringList) Visitor() *StringListNodeVisitor {
	n := &StringListNodeVisitor{node: nil, head: this.head}
	return n
}

//list object
type StringList struct {
	head *StringListNode
}

//new object
func NewStringList() *StringList {
	return &StringList{}
}

//func (this *StringList) Len() int {
//	return 0
//}

func (this *StringList) Front() *StringListNode {
	return this.head
}
func (this *StringList) Back() (r *StringListNode) {
	if this.head != nil {
		r = this.head.prev
	}
	return
}

func (this *StringList) Clear() {
	this.head = nil
}

func (this *StringList) RotateForward() {
	if this.head != nil {
		this.head = this.head.next
	}
}
func (this *StringList) RotateBackward() {
	if this.head != nil {
		this.head = this.head.prev
	}
}

func (this *StringList) PushFront(v string) *StringListNode {
	n := &StringListNode{string: v}
	return this.InsertFront(n)
}

func (this *StringList) PushBack(v string) *StringListNode {
	n := &StringListNode{string: v}
	return this.InsertBack(n)
}

func (this *StringList) InsertFront(node *StringListNode) (n *StringListNode) {
	if n = this.InsertBack(node); n != nil {
		this.RotateBackward()
	}
	return
}

func (this *StringList) InsertBack(node *StringListNode) (n *StringListNode) {
	if n = node; n != nil {
		if this.head != nil {
			this.head, n.next, n.prev = n, n, n
		} else {
			n.next = this.head
			n.prev = this.head.prev
		}
	}
	return
}

func (this *StringList) PopFront() (v string, ok bool) {
	if n := this.Remove(this.Front()); n != nil {
		v, ok = n.Get(), true
	}
	return
}

func (this *StringList) PopBack() (v string, ok bool) {
	if n := this.Remove(this.Back()); n != nil {
		v, ok = n.Get(), true
	}
	return
}

func (this *StringList) InsertFrontList(other *StringList) (ok bool) {
	rotate := !this.Empty()
	if ok = this.InsertBackList(other); ok && rotate {
		this.RotateBackward()
	}
	return
}

func (this *StringList) InsertBackList(other *StringList) (ok bool) {
	if ok = !other.Empty(); ok {
		if this.Empty() {
			this.head = other.head
		} else {
			myback, oback := this.Back(), other.Back()
			myback.next = other.head
			oback.next = this.head
			other.head.prev = myback
			this.head.prev = oback
		}
		other.Clear()
	}
	return
}

func (this *StringList) PushBefore(v string, mark *StringListNode) (n *StringListNode) {
	if mark != nil {
		n = &StringListNode{string: v}
		n = this.InsertBefore(n, mark)
	}
	return
}

func (this *StringList) PushAfter(v string, mark *StringListNode) (n *StringListNode) {
	if mark != nil {
		n = &StringListNode{string: v}
		n = this.InsertAfter(n, mark)
	}
	return
}

func (this *StringList) InsertBefore(node, mark *StringListNode) (n *StringListNode) {
	if n = node; node != nil && mark != nil {
		n.next = mark
		n.prev = mark.prev
		mark.prev = n
		if this.head == mark {
			this.RotateBackward()
		}
	}
	return
}

func (this *StringList) InsertAfter(node, mark *StringListNode) (n *StringListNode) {
	if n = node; node != nil && mark != nil {
		n.next = mark.next
		n.prev = mark
		mark.next = n
	}
	return
}

func (this *StringList) RemoveFront() (n *StringListNode) {
	return this.Remove(this.Front())
}

func (this *StringList) RemoveBack() (n *StringListNode) {
	return this.Remove(this.Back())
}

func (this *StringList) Remove(node *StringListNode) (n *StringListNode) {
	if node != nil && node.next != nil && node.prev != nil {
		n = node
		if node.next == node {
			this.head = nil
		} else if node == this.head {
			this.head = node.next
		}
		node.next.prev = node.prev
		node.prev.next = node.next
		node.next, node.prev = nil, nil
	}
	return
}

func (this *StringList) Reachable(node, dest *StringListNode) (ok bool) {
	if ok = (node == dest) && node != nil; !ok && node != nil && dest != nil {
		for p := node; p != nil && p != node; p = p.next {
			if ok = (p == dest); ok {
				break
			}
		}
	}
	return
}

func (this *StringList) IsValidNode(node *StringListNode) bool {
	return this.Reachable(this.head, node)
}

func (this *StringList) MoveFront(node *StringListNode) (r *StringListNode) {
	if r = this.MoveBack(node); r != nil {
		this.RotateBackward()
	}
	return
}

func (this *StringList) MoveBack(node *StringListNode) (r *StringListNode) {
	if node != nil && node.next != nil && node.prev != nil && node.next != node { //bug:node is back?
		node.next.prev = node.prev
		node.prev.next = node.next
		node.next = this.head
		node.prev = this.head.prev
		this.head.prev.next = node
		this.head.prev = node
		r = node
	}
	return
}

func (this *StringList) MoveBefore(node, mark *StringListNode) (r *StringListNode) {
	if node != nil && mark != nil && node != mark && node.next != mark {
		if r = this.Remove(node); r != nil {
			node.next = mark.prev.next
			node.prev = mark.prev
			mark.prev.next = node
			mark.prev = node
		}
	}
	return
}

func (this *StringList) MoveAfter(node, mark *StringListNode) (r *StringListNode) {
	if node != nil && mark != nil && node != mark && mark.next != node {
		if r = this.Remove(node); r != nil {
			node.next = mark.next
			node.prev = mark
			mark.next.prev = node
			mark.next = node
		}
	}
	return
}

func (this *StringList) Empty() bool {
	return this.head == nil
}

func (this *StringList) Reverse() {
	v := this.Visitor()
	this.Clear()
	for v.Next() {
		this.InsertFront(v.Get())
	}
}

func (this *StringList) Sort() {
	this.mergeSort()
}

//STL's merge sort algorithm for list
func (this *StringList) mergeSort() {
	if nil == this.head || this.head == this.head.next { //0 or 1 element, no need to sort
		return
	}

	var (
		hand, unsorted StringList
		binList        [64]StringList //save temp list that len=2^i
		nFilledBin     = 0
	)

	for unsorted = *this; !unsorted.Empty(); {
		hand.InsertFront(unsorted.RemoveFront())
		i := 0
		for ; i < nFilledBin && !binList[i].Empty(); i++ {
			binList[i].merge(&hand)
			hand, binList[i] = binList[i], hand
		}
		hand, binList[i] = binList[i], hand
		if i == nFilledBin {
			nFilledBin++
		}
	}

	for i := 1; i < nFilledBin; i++ {
		binList[i].merge(&binList[i-1])
	}

	*this = binList[nFilledBin-1]
}

//merge other sorted-list  to this sorted-list
func (this *StringList) merge(other *StringList) {
	if this.Empty() || other.Empty() {
		this.InsertBackList(other)
		return
	}

	p, po := this.Front(), other.Front()
	for p != nil && po != nil {
		if gStringListGbl.cmp.F(po.string, p.string) {
			n := other.RemoveFront()
			po = other.Front()
			p = this.InsertBefore(n, p)
		} else {
			if p = p.next; p == this.Front() {
				p = nil
			}
		}
	}
	if po != nil {
		this.InsertBackList(other)
	}
}
