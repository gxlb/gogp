///////////////////////////////////////////////////////////////////
//
//    !!!!!!!!!!NEVER MODIFY THIS FILE MANUALLY!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Tue Oct 04 2016 22:28:50]
// Generate from:
//     [github.com/vipally/gogp/examples/example.gp]
//     [github.com/vipally/gogp/examples/example.gpg] [const_str]
//
//
//    CopyRight 2016 @Ally Dale. All rights reserved.
//    Author  : Ally Dale(vipally@gmail.com)
//    Blog    : http://blog.csdn.net/vipally
//    Site    : https://github.com/vipally
//    BuildAt : [Oct  2 2016 01:44:50]
//    Version : 2.9.0
///////////////////////////////////////////////////////////////////

//This is an example of using gopg tool for generic-programming
//this is an example of using gopg to define an auto-lock global value with generic type
//it will be realized to real go code by gopg tool through the .gpg file with the same name

package example

import (
	//"sync"
)

//auto locked global value
type AutoLockGblConstStr struct {
	val  string
	//lock sync.RWMutex
}

//new and init a global value
func NewConstStr(val string) *AutoLockGblConstStr{
	p := &AutoLockGblConstStr{}
	p.val = val
	return p
}

//get value, if modify is disable, lock is unneeded
func (me *AutoLockGblConstStr) Get() (r string) {
//	me.lock.RLock()
//	defer me.lock.RUnlock()
	r = me.val
	return
}

//set value, if modify is disable, delete this function
//func (me *AutoLockGblConstStr) Set(val string) (r string) {
//	me.lock.Lock()
//	defer me.lock.Unlock()
//	r = me.val
//	me.val = val
//	return
//}
