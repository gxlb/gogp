// This file was auto-generated by [gogp] tool
// Last modify at: [Tue Sep 20 2016 22:31:29]
// !!!!!!!!!NEVER MODIFY IT MANUALLY!!!!!!!!!

//    CopyRight @Ally Dale 2016
//    Author  : Ally Dale(vipally@gmail.com)
//    Blog    : http://blog.csdn.net/vipally
//    Site    : https://github.com/vipally
//    BuildAt : [Sep 20 2016 22:10:12]
//    Version : 1.0.2


//This is an example of using gopg tool for generic-programming
//this is an example of using gopg to define an auto-lock global value with generic type
//it will be realized to real go code by gopg tool through the .gpg file with the same name
package example

import (
	"sync"
)

//auto locked global value
type AutoLockGblInt struct {
	val  int
	lock sync.RWMutex
}

//new and init a global value
func NewInt(val int) *AutoLockGblInt{
	p := &AutoLockGblInt{}
	p.val = val
	return p
}

//get value, if modify is disable, lock is unneeded
func (me *AutoLockGblInt) Get() (r int) {
	me.lock.RLock()
	defer me.lock.RUnlock()
	r = me.val
	return
}

//set value, if modify is disable, delete this function
func (me *AutoLockGblInt) Set(val int) (r int) {
	me.lock.Lock()
	defer me.lock.Unlock()
	r = me.val
	me.val = val
	return
}
