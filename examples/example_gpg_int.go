// This file was auto-generated by [gpg] tool
// Last modify at: 2014-01-21 13:06:46.6378366 +0800 +0800
// !!!!!!!!!NEVER MODIFY IT MANUALLY!!!!!!!!!

//Copyright @Ally 2014. All rights reserved.
//Version:   1.0.0
//Author:    vipally@gmail.com
//Blog site: http://blog.sina.com.cn/ally2014

//This is an example of using gpg tool for generic-programming
//this is an example of using gpg to define an auto-lock global value with generic type
//it will be realized to real go code by gpg tool through the .gpg file with the same name
package example

import (
	"sync"
)

//auto locked global value
type AutoLockGblInt struct {
	val  int
	lock sync.RWMutex
}

//new and init a global value
func NewInt(val int) *AutoLockGblInt{
	p := &AutoLockGblInt{}
	p.val = val
	return p
}

//get value, if modify is disable, lock is unneeded
func (me *AutoLockGblInt) Get() (r int) {
	me.lock.RLock()
	defer me.lock.RUnlock()
	r = me.val
	return
}

//set value, if modify is disable, delete this function
func (me *AutoLockGblInt) Set(val int) (r int) {
	me.lock.Lock()
	defer me.lock.Unlock()
	r = me.val
	me.val = val
	return
}
