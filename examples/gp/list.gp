//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Tue Nov 22 2016 11:22:57]
// Generate from:
//   [github.com/vipally/gogp/examples/gp/list.gp.go]
//   [github.com/vipally/gogp/examples/gp/gp.gpg] [GOGP_REVERSE_list]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : [Oct  8 2016 10:34:35]
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

//#GOGP_REQUIRE(github.com/vipally/gogp/lib/fakedef,_)

//#GOGP_REQUIRE(github.com/vipally/gogp/examples/gp/functorcmp)

////////////////////////////////////////////////////////////////////////////////

var g<GLOBAL_NAME_PREFIX>ListGbl struct {
	cmp Cmp<GLOBAL_NAME_PREFIX>
}

func init() {
	g<GLOBAL_NAME_PREFIX>ListGbl.cmp = g<GLOBAL_NAME_PREFIX>ListGbl.cmp.CreateByName("#GOGP_GPGCFG(GOGP_DefaultCmpType)")
}

//double-way cycle link list node
type <GLOBAL_NAME_PREFIX>ListNode struct {
	<VALUE_TYPE>
	prev, next *<GLOBAL_NAME_PREFIX>ListNode
}

func (this *<GLOBAL_NAME_PREFIX>ListNode) Get() <VALUE_TYPE> {
	return this.<VALUE_TYPE>
}

func (this *<GLOBAL_NAME_PREFIX>ListNode) Set(v <VALUE_TYPE>) (old <VALUE_TYPE>) {
	old, this.<VALUE_TYPE> = this.<VALUE_TYPE>, v
	return
}

func (this *<GLOBAL_NAME_PREFIX>ListNode) Next() (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if this != nil {
		r = this.next
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>ListNode) Prev() (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if this != nil {
		r = this.prev
	}
	return
}

type GOGGlobalNamePrefixListNodeVisitor struct {
	node, head *<GLOBAL_NAME_PREFIX>ListNode
}

func (this *GOGGlobalNamePrefixListNodeVisitor) Reset() {
	this.node = nil
}

func (this *GOGGlobalNamePrefixListNodeVisitor) Next() (ok bool) {
	if this.node == nil {
		if ok = this.head != nil; ok {
			this.node = this.head
		}
	} else {
		this.node = this.node.next
		ok = this.node != this.head
	}
	return
}

func (this *GOGGlobalNamePrefixListNodeVisitor) Prev() (ok bool) {
	if this.node == nil {
		if ok = this.head != nil; ok {
			this.node = this.head.prev
		}
	} else {
		this.node = this.node.prev
		ok = this.node != this.head.prev
	}
	return
}

func (this *GOGGlobalNamePrefixListNodeVisitor) Get() *<GLOBAL_NAME_PREFIX>ListNode {
	return this.node
}

func (this *<GLOBAL_NAME_PREFIX>List) Visitor(node *<GLOBAL_NAME_PREFIX>ListNode) *GOGGlobalNamePrefixListNodeVisitor {
	n := &GOGGlobalNamePrefixListNodeVisitor{node: nil, head: this.head}
	return n
}

//list object
type <GLOBAL_NAME_PREFIX>List struct {
	head *<GLOBAL_NAME_PREFIX>ListNode
}

//new object
func New<GLOBAL_NAME_PREFIX>List() *<GLOBAL_NAME_PREFIX>List {
	return &<GLOBAL_NAME_PREFIX>List{}
}

//func (this *<GLOBAL_NAME_PREFIX>List) Len() int {
//	return 0
//}

func (this *<GLOBAL_NAME_PREFIX>List) Front() *<GLOBAL_NAME_PREFIX>ListNode {
	return this.head
}
func (this *<GLOBAL_NAME_PREFIX>List) Back() (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if this.head != nil {
		r = this.head.prev
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) Clear() {
	this.head = nil
}

func (this *<GLOBAL_NAME_PREFIX>List) RotateForward() {
	if this.head != nil {
		this.head = this.head.next
	}
}
func (this *<GLOBAL_NAME_PREFIX>List) RotateBackward() {
	if this.head != nil {
		this.head = this.head.prev
	}
}

func (this *<GLOBAL_NAME_PREFIX>List) PushFront(v <VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>ListNode {
	n := this.PushBack(v)
	this.RotateBackward()
	return n
}

func (this *<GLOBAL_NAME_PREFIX>List) PushBack(v <VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>ListNode {
	n := &<GLOBAL_NAME_PREFIX>ListNode{<VALUE_TYPE>: v}
	if this.head != nil {
		this.head, n.next, n.prev = n, n, n
	} else {
		n.next = this.head
		n.prev = this.head.prev
	}
	return n
}

func (this *<GLOBAL_NAME_PREFIX>List) PopFront() (v <VALUE_TYPE>, ok bool) {
	if n := this.Remove(this.Front()); n != nil {
		v, ok = n.Get(), true
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) PopBack() (v <VALUE_TYPE>, ok bool) {
	if n := this.Remove(this.Back()); n != nil {
		v, ok = n.Get(), true
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) PushFrontList(other *<GLOBAL_NAME_PREFIX>List) {
	this.PushBackList(other)
	this.RotateBackward()
}

func (this *<GLOBAL_NAME_PREFIX>List) PushBackList(other *<GLOBAL_NAME_PREFIX>List) {
	if other.head != nil {
		if this.head == nil {
			this.head = other.head
		} else {
			myback, oback := this.Back(), other.Back()
			myback.next = other.head
			oback.next = this.head
			other.head.prev = myback
			this.head.prev = oback
		}
	}
}

func (this *<GLOBAL_NAME_PREFIX>List) PushBefore(v <VALUE_TYPE>, mark *<GLOBAL_NAME_PREFIX>ListNode) (n *<GLOBAL_NAME_PREFIX>ListNode) {
	if mark != nil {
		n = &<GLOBAL_NAME_PREFIX>ListNode{<VALUE_TYPE>: v}
		n.next = mark
		n.prev = mark.prev
		mark.prev = n
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) PushAfter(v <VALUE_TYPE>, mark *<GLOBAL_NAME_PREFIX>ListNode) (n *<GLOBAL_NAME_PREFIX>ListNode) {
	if mark != nil {
		n = &<GLOBAL_NAME_PREFIX>ListNode{<VALUE_TYPE>: v}
		n.next = mark.next
		n.prev = mark
		mark.next = n
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) Remove(node *<GLOBAL_NAME_PREFIX>ListNode) (n *<GLOBAL_NAME_PREFIX>ListNode) {
	if node != nil && node.next != nil && node.prev != nil {
		n = node
		if node.next == node {
			this.head = nil
		} else if node == this.head {
			this.head = node.next
		}
		node.next.prev = node.prev
		node.prev.next = node.next
		node.next, node.prev = nil, nil
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) Reachable(node, dest *<GLOBAL_NAME_PREFIX>ListNode) (ok bool) {
	if ok = (node == dest) && node != nil; !ok && node != nil && dest != nil {
		for p := node; p != nil && p != node; p = p.next {
			if ok = (p == dest); ok {
				break
			}
		}
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) IsValidNode(node *<GLOBAL_NAME_PREFIX>ListNode) bool {
	return this.Reachable(this.head, node)
}

func (this *<GLOBAL_NAME_PREFIX>List) MoveFront(node *<GLOBAL_NAME_PREFIX>ListNode) (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if r = this.MoveBack(node); r != nil {
		this.RotateBackward()
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) MoveBack(node *<GLOBAL_NAME_PREFIX>ListNode) (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if node != nil && node.next != nil && node.prev != nil && node.next != node { //bug:node is back?
		node.next.prev = node.prev
		node.prev.next = node.next
		node.next = this.head
		node.prev = this.head.prev
		this.head.prev.next = node
		this.head.prev = node
		r = node
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) MoveBefore(node, mark *<GLOBAL_NAME_PREFIX>ListNode) (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if node != nil && mark != nil && node != mark && node.next != mark {
		if r = this.Remove(node); r != nil {
			node.next = mark.prev.next
			node.prev = mark.prev
			mark.prev.next = node
			mark.prev = node
		}
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) MoveAfter(node, mark *<GLOBAL_NAME_PREFIX>ListNode) (r *<GLOBAL_NAME_PREFIX>ListNode) {
	if node != nil && mark != nil && node != mark && mark.next != node {
		if r = this.Remove(node); r != nil {
			node.next = mark.next
			node.prev = mark
			mark.next.prev = node
			mark.next = node
		}
	}
	return
}

func (this *<GLOBAL_NAME_PREFIX>List) Reverse() {}

func (this *<GLOBAL_NAME_PREFIX>List) Sort() {
	return
}

